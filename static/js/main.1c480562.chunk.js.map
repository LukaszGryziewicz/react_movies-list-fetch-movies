{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","api.ts","components/FindMovie/FindMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","props","movie","className","src","Poster","alt","Title","Plot","MoviesList","movies","map","imdbID","getMovie","title","a","fetch","json","FindMovie","onAddMovie","useState","titleQuery","setTitleQuery","selectedMovie","setSelectedMovie","shouldDisplayError","setShouldDisplayError","searchForMovie","htmlFor","type","id","placeholder","value","onChange","event","target","onClick","App","setMovies","movieExists","movieIsNotInTheList","some","film","ReactDOM","render","document","getElementById"],"mappings":"8TAOaA,EAA6B,SAACC,GACzC,IAAQC,EAAUD,EAAVC,MAER,OACE,sBAAKC,UAAU,OAAf,UACE,qBAAKA,UAAU,aAAa,UAAQ,aAApC,SAEE,wBAAQA,UAAU,gBAAlB,SACE,qBACEC,IAAKF,EAAMG,OACXC,IAAI,kBAIV,sBAAKH,UAAU,eAAf,UACE,sBAAKA,UAAU,QAAf,UACE,qBAAKA,UAAU,aAAf,SACE,wBAAQA,UAAU,iBAAlB,SACE,qBACEC,IAAI,wBACJE,IAAI,aAIV,qBAAKH,UAAU,gBAAf,SACE,mBAAGA,UAAU,aAAa,UAAQ,cAAlC,SAAiDD,EAAMK,aAI3D,sBAAKJ,UAAU,UAAU,UAAQ,UAAjC,UACGD,EAAMM,KACP,iCC9BGC,EAA8B,SAACR,GAC1C,IAAQS,EAAWT,EAAXS,OAER,OACE,qBAAKP,UAAU,SAAf,SACGO,EAAOC,KAAI,SAAAT,GAAK,OACf,cAAC,EAAD,CAEEA,MAAOA,GADFA,EAAMU,c,uBCbRC,G,MAAQ,uCAAG,WAAOC,GAAP,eAAAC,EAAA,sEACFC,MAAM,GAAD,OAHX,2CAGW,cAAiBF,IADpB,cAChBZ,EADgB,yBAGfA,EAAMe,QAHS,2CAAH,uDCQRC,EAA6B,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WAC3C,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAA0CF,mBAAuB,MAAjE,mBAAOG,EAAP,KAAsBC,EAAtB,KACA,EAAoDJ,oBAAS,GAA7D,mBAAOK,EAAP,KAA2BC,EAA3B,KAEMC,EAAc,uCAAG,4BAAAZ,EAAA,sEACDF,EAASQ,GADR,OACfnB,EADe,OAGrBsB,EAAiBtB,GAEZA,EAAMU,QACTc,GAAsB,GANH,2CAAH,qDAmBpB,OACE,qCACE,uBAAMvB,UAAU,aAAhB,UACE,sBAAKA,UAAU,QAAf,UACE,uBAAOA,UAAU,QAAQyB,QAAQ,cAAjC,yBAIA,qBAAKzB,UAAU,UAAf,SACE,uBACE0B,KAAK,OACLC,GAAG,cACHC,YAAY,0BACZ5B,UAAU,QACV6B,MAAOX,EACPY,SAAW,SAAAC,GACTZ,EAAcY,EAAMC,OAAOH,OAC3BN,GAAsB,QAK1BH,GAAiBE,GAEf,mBAAGtB,UAAU,iBAAb,qDAON,sBAAKA,UAAU,mBAAf,UACE,qBAAKA,UAAU,UAAf,SACE,wBACE0B,KAAK,SACL1B,UAAU,kBACViC,QAAS,kBAAMT,KAHjB,4BASF,qBAAKxB,UAAU,UAAf,SACE,wBACE0B,KAAK,SACL1B,UAAU,oBACViC,QAAS,WAtDfb,IACFJ,EAAWI,GACXD,EAAc,IACdE,EAAiB,MACjBE,GAAsB,KA+ChB,qCAWN,sBAAKvB,UAAU,YAAf,UAEE,oBAAIA,UAAU,QAAd,qBACEoB,GAAiBA,EAAcX,SAAWa,GAExC,cAAC,EAAD,CAAWvB,MAAOqB,WCxFjBc,EAAgB,WAC3B,MAA4BjB,mBAAkB,IAA9C,mBAAOV,EAAP,KAAe4B,EAAf,KAaA,OACE,sBAAKnC,UAAU,OAAf,UACE,qBAAKA,UAAU,eAAf,SACE,cAAC,EAAD,CAAYO,OAAQA,MAEtB,qBAAKP,UAAU,UAAf,SACE,cAAC,EAAD,CAAWgB,WAjBA,SAACjB,GAChB,IAAMqC,EAAcrC,EAAMU,OACpB4B,GAAuB9B,EAAO+B,MAClC,SAAAC,GAAI,OAAIA,EAAK9B,SAAWV,EAAMU,UAG5B2B,GAAeC,GACjBF,EAAU,GAAD,mBAAK5B,GAAL,CAAaR,cCX5ByC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.1c480562.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie;\n};\n\nexport const MovieCard: React.FC<Props> = (props) => {\n  const { movie } = props;\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-image\" data-cy=\"card-image\">\n\n        <figure className=\"image is-4by3\">\n          <img\n            src={movie.Poster}\n            alt=\"Film logo\"\n          />\n        </figure>\n      </div>\n      <div className=\"card-content\">\n        <div className=\"media\">\n          <div className=\"media-left\">\n            <figure className=\"image is-48x48\">\n              <img\n                src=\"images/imdb-logo.jpeg\"\n                alt=\"imdb\"\n              />\n            </figure>\n          </div>\n          <div className=\"media-content\">\n            <p className=\"title is-8\" data-cy=\"movie-title\">{movie.Title}</p>\n          </div>\n        </div>\n\n        <div className=\"content\" data-cy=\"content\">\n          {movie.Plot}\n          <br />\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = (props) => {\n  const { movies } = props;\n\n  return (\n    <div className=\"movies\">\n      {movies.map(movie => (\n        <MovieCard\n          key={movie.imdbID}\n          movie={movie}\n        />\n      ))}\n    </div>\n  );\n};\n","const API_URL = 'https://www.omdbapi.com/?apikey=5cedccaf';\n\nexport const getMovie = async (title: string): Promise<Movie> => {\n  const movie = await fetch(`${API_URL}&t=${title}`);\n\n  return movie.json();\n};\n","import React, { useState } from 'react';\nimport './FindMovie.scss';\n\nimport { MovieCard } from '../MovieCard';\nimport { getMovie } from '../../api';\n\ninterface Props {\n  onAddMovie: (movie: Movie) => void;\n}\n\nexport const FindMovie: React.FC<Props> = ({ onAddMovie }) => {\n  const [titleQuery, setTitleQuery] = useState('');\n  const [selectedMovie, setSelectedMovie] = useState<Movie | null>(null);\n  const [shouldDisplayError, setShouldDisplayError] = useState(false);\n\n  const searchForMovie = async () => {\n    const movie = await getMovie(titleQuery);\n\n    setSelectedMovie(movie);\n\n    if (!movie.imdbID) {\n      setShouldDisplayError(true);\n    }\n  };\n\n  const addMovie = () => {\n    if (selectedMovie) {\n      onAddMovie(selectedMovie);\n      setTitleQuery('');\n      setSelectedMovie(null);\n      setShouldDisplayError(false);\n    }\n  };\n\n  return (\n    <>\n      <form className=\"find-movie\">\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className=\"input\"\n              value={titleQuery}\n              onChange={(event => {\n                setTitleQuery(event.target.value);\n                setShouldDisplayError(false);\n              })}\n            />\n          </div>\n\n          {(selectedMovie && shouldDisplayError)\n            && (\n              <p className=\"help is-danger\">\n                Can&apos;t find a movie with such a title\n              </p>\n            )}\n\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              className=\"button is-light\"\n              onClick={() => searchForMovie()}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              className=\"button is-primary\"\n              onClick={() => addMovie()}\n            >\n              Add to the list\n            </button>\n          </div>\n        </div>\n      </form>\n\n      <div className=\"container\">\n\n        <h2 className=\"title\">Preview</h2>\n        {(selectedMovie && selectedMovie.imdbID && !shouldDisplayError)\n          && (\n            <MovieCard movie={selectedMovie} />\n          )}\n      </div>\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\n\nexport const App: React.FC = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n\n  const addMovie = (movie: Movie) => {\n    const movieExists = movie.imdbID;\n    const movieIsNotInTheList = !movies.some(\n      film => film.imdbID === movie.imdbID,\n    );\n\n    if (movieExists && movieIsNotInTheList) {\n      setMovies([...movies, movie]);\n    }\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <FindMovie onAddMovie={addMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}